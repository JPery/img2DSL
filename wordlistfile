context
inv
pre
let
post
body
def
if
then
else
library
metamodel
require
public
definitions
init
derive
endif
enddefinitions
endlibrary
let
package
endpackage
static
Sequence
Set
Bag
OrderedSet
Boolean
Integer
Real
String
Tuple
OclAny
Collection
OclInvalid
OclVoid
OclMessage
UnlimitedNatural
oclIsTypeOf
oclIsKindOf
oclIsUndefined
oclIsInvalid
oclAsType
oclIsNew
allInstances
isUnique
isEmpty
includes
excludes
select
collect
exists
forAll
size
sum
product
includes
asSet
asOrderedSet
asBag
asSequence
one
abs
floor
max
min
round
div
mod
concat
substring
toInteger
toLowerCase
toReal
toUpperCase
indexOf
union
selectByKind
any
notEmpty
oclIsInState
reject
closure
includesAll
iterate
flatten
collectNested
count
excludesAll
oclType
oclLocale
toString
equalsIgnoreCase
at
characters
toBoolean
selectByType
intersection
including
excluding
symmetricDifference
append
prepend
insertAt
subOrderedSet
first
last
reverse
subSequence
sortedBy
in
is
and
or
xor
not
implies
true
false
null
invalid
self
none